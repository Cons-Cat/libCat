// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/detail/simd_impl.hpp>

#include <cat/bit>
#include <cat/simd>
#include <cat/span>

namespace std {

// Deprecated call to `memcpy()`. Consider using `cat::copy_buffer()` instead.
// `memcpy()` exists to enable some GCC optimizations.
extern "C" [[deprecated("`std::memcpy()` should not be used directly! Consider "
                        "`cat::copy_memory()` instead.")]]
auto
memcpy(void* p_destination, void const* p_source, __SIZE_TYPE__ bytes) -> void*;

// Deprecated call to `memset()`. Consider using `cat::set_memory() or
// cat::zero_memory()` instead. `memset()` exists to enable some GCC
// optimizations.
extern "C" [[deprecated("`std::memset()` should not be used directly! Consider "
                        "`cat::set_memory()` or "
                        "`cat::zero_memory()` instead.")]]
auto
memset(void* p_source, int byte_value, __SIZE_TYPE__ bytes) -> void*;

}  // namespace std

namespace cat {

constexpr auto
string_length(char const* p_string) -> idx;

template <typename char_type, idx length, bool is_null_terminated>
class basic_str_inplace;

template <typename char_type, bool is_null_terminated>
   requires(sizeof(char_type) == 1)  // TODO: Generalize this to wide chars.
class basic_str_span : public span<char_type> {
 public:
   constexpr basic_str_span() : span<char_type>(nullptr) {
   }

   constexpr basic_str_span(basic_str_span const& string) = default;

   constexpr basic_str_span(char_type* p_string, idx in_length)
       : span<char_type>(p_string, in_length) {
   }

   // This weird template deduces lower than the string literal constructor.
   template <typename T>
      requires(is_pointer<T>)
   constexpr basic_str_span(T p_string [[clang::lifetimebound]]
                            )
       : span<char_type>(p_string,
                         string_length(p_string) + is_null_terminated) {
   }

   // Zero-overhead string literal constructor.
   template <idx other_length>
   consteval basic_str_span(char_type (&string)[other_length]) {
      // Verify that the final character is null terminator. This is necessary
      // if `constexpr char` arrays are passed in rather than string literals.
      [[assume(string[other_length.raw - 1] == '\0')]];
      this->m_p_data = string;
      // Subtract 1 to length to ignore a null terminator.
      this->m_size = other_length - idx(!is_null_terminated);
   }

   template <idx other_length>
      requires(!is_const<char_type>)
   consteval basic_str_span(char_type const (&string)[other_length]) =
      delete("Cannot construct a mutable `str_span` over a `char const*` "
             "literal! Consider a `str_view` instead.");

   // Make a `str_span` over a `str_inplace`.
   template <idx other_length>
   constexpr basic_str_span(basic_str_inplace<char_type, other_length,
                                              is_null_terminated>& other_string
                            [[clang::lifetimebound]]
   ) {
      this->m_p_data = other_string.data();
      this->m_size = other_length;
   }

   // Make a `str_view` over a `str_inplace`.
   template <idx other_length>
      requires(is_const<char_type>)
   constexpr basic_str_span(
      basic_str_inplace<remove_const<char_type>, other_length,
                        is_null_terminated> const& other_string
      [[clang::lifetimebound]]
   ) {
      this->m_p_data = other_string.data();
      this->m_size = other_length;
   }

   // Make a `str_span` over a `zstr_inplace`.
   template <typename T, idx other_length>
      requires(!is_null_terminated)
   constexpr basic_str_span(
      basic_str_inplace<T, other_length, true>& other_string
      [[clang::lifetimebound]]
   ) {
      this->m_p_data = other_string.data();
      // Subtract 1 to skip the null terminator.
      this->m_size = other_length - 1;
   }

   // Make a `str_view` over a `zstr_inplace`.
   template <typename T, idx other_length>
      requires(!is_null_terminated)
   constexpr basic_str_span(
      basic_str_inplace<T, other_length, true> const& other_string
      [[clang::lifetimebound]]
   ) {
      this->m_p_data = other_string.data();
      // Subtract 1 to skip the null terminator.
      this->m_size = other_length - 1;
   }

   // Make a `str_span` over a `zstr_inplace`.
   template <idx other_length>
      requires(is_null_terminated && !is_const<char_type>)
   constexpr basic_str_span(
      basic_str_inplace<char_type, other_length, false> const&) =
      delete("Cannot bind a null-terminated `zstr_span` over a "
             "non null-terminated `str_inplace`!");

   // Promote `basic_str_span<char>` to `basic_str_span<char const>`.
   template <typename T>
      requires(is_same<char_type, add_const<T>>)
   constexpr basic_str_span(basic_str_span<T, is_null_terminated> in_span
                            [[clang::lifetimebound]]
                            )
       : span<char_type>(in_span) {
   }

   // Promote `zstr_span` to `str_span`.
   template <typename T>
      requires(!is_same<char_type, add_const<T>> && !is_null_terminated)
   constexpr basic_str_span(basic_str_span<T, true> in_span
                            [[clang::lifetimebound]]
   ) {
      this->m_p_data = in_span.data();
      // Subtract 1 to skip the null terminator.
      this->m_size = in_span.size() - 1u;
   }

   // Promote `zstr_span<char>` to `str_span<char const>`.
   template <typename T>
      requires(is_same<char_type, add_const<T>> && !is_null_terminated)
   constexpr basic_str_span(basic_str_span<T, true> in_span
                            [[clang::lifetimebound]]
   ) {
      this->m_p_data = in_span.data();
      // Subtract 1 to skip the null terminator.
      this->m_size = in_span.size() - 1u;
   }

   // Prevent binding a `zstr_span` over a `str_span`.
   constexpr basic_str_span(basic_str_span<char_type, false> const&)
      requires(is_null_terminated)
   = delete("Cannot bind a null-terminated `zstr_span` over a "
            "non null-terminated `str_span`!");

   // Promote `span<char>` to `basic_str_span<char>`.
   constexpr basic_str_span(span<char_type> in_span [[clang::lifetimebound]])
       : span<char_type>(in_span) {
   }

   // A `string` consuming `nullptr` would cause undefined behavior.
   constexpr basic_str_span(decltype(nullptr)) = delete;

   constexpr auto
   operator=(basic_str_span const& other_string) -> basic_str_span& {
      this->m_p_data = other_string.data();
      this->m_size = other_string.size();
      return *this;
   }

   friend constexpr auto
   operator==(basic_str_span const& this_string,
              basic_str_span const& other_string) {
      return compare_strings(this_string, other_string);
   }

   // TODO: Make these member functions `const`.

   [[nodiscard]]
   constexpr auto
   substring(idx position, idx count) -> basic_str_span {
      return {this->m_p_data + position, count};
   }

   [[nodiscard]]
   constexpr auto
   remove_prefix(idx offset) -> basic_str_span {
      return this->substring(offset, this->m_size - offset);
   }

   [[nodiscard]]
   constexpr auto
   remove_suffix(idx offset) -> basic_str_span {
      return this->substring(0u, this->m_size - offset);
   }

   [[nodiscard]]
   // TODO: Make this return an `idx`.
   constexpr auto
   find_small(char_type character, idx position = 0u) const
      -> maybe<sentinel<iword, -1>> {
      for (idx i = position; i < this->m_size; ++i) {
         if (this->m_p_data[i.raw] == character) {
            return iword(i);
         }
      }
      return nullopt;  // This is `-1`.
   }

   // TODO: Optimize different length strings.
   [[nodiscard]]
   // TODO: Return an `idx`.
   constexpr auto
   find(char character, idx from_position = 0u) const
      -> maybe<sentinel<iword, -1>> {
      // TODO: `lanes` should be an `idx`.
      iword lanes = iword(char1x_::lanes);

      // TODO: Tile this loop four or eight times.
      // `i` must be signed, because `length - lanes` might be negative.
      // this->length must be cast to an `iword`, because otherwise it might
      // underflow.
      iword i;
      for (i = from_position; i < iword(this->m_size) - lanes; i += lanes) {
         // TODO: Consider aligning this load?
         char1x_ const storage = char1x_::loaded(this->m_p_data + i);
         // TODO: Support a native ABI mask here.
         simd_mask<x64::avx2_abi<char>, char> const compare =
            (storage == character);
         bitset const mask = compare.bitset();
         if (mask.any_of()) {
            return i + mask.countr_zero();
         }
      }

      // The last chunk of this string, smaller than `char1x_::lanes`, is
      // stepped through one character at a time.
      // Casting `i` to `idx` is guarenteed to be safe by this point.
      return this->find_small(character, idx(i));
   }

 private:
   // `basic_str_span` inherits:
   //
   // `char_type* m_p_data;`
   // `iword m_size;`
};

using str_view = basic_str_span<char const, false>;
using str_span = basic_str_span<char, false>;
using zstr_view = basic_str_span<char const, true>;
using zstr_span = basic_str_span<char, true>;

template <typename char_type, idx length, bool is_null_terminated>
class basic_str_inplace
    : public collection_interface<
         basic_str_inplace<char_type, length, is_null_terminated>, char>,
      public random_access_iterable_interface<char> {
 public:
   constexpr basic_str_inplace() = default;

   constexpr basic_str_inplace(basic_str_inplace const& string) = default;

   // Construct and deduce length from a string literal.
   // Add 1 to length to ignore a null terminator.
   consteval basic_str_inplace(
      char_type const (&string)[length + idx(!is_null_terminated)]) {
      [[assume(string[length.raw - is_null_terminated] == '\0')]];
      // This must be copied instead of initialized in-place to guarantee
      // const-correctness.
      this->copy_string_data(string);
   }

   // Assign a `basic_str_inplace` of lesser or equal length.
   constexpr auto
   // NOLINTNEXTLINE This does handle self-assignment.
   operator=(
      basic_str_inplace<char_type, length, is_null_terminated> const& string)
      -> basic_str_inplace<char_type, length, is_null_terminated>& {
      this->copy_string_data(string.data());
      return *this;
   }

   // TODO: Make this `consteval`.
   // Assign a string literal of lesser or equal length.
   consteval auto
   operator=(char_type const (&string)[length - is_null_terminated])
      -> basic_str_inplace& {
      [[assume(string[length.raw - 1 + !is_null_terminated] == '\0')]];
      this->copy_string_data(string);
      return *this;
   }

   // Compare two strings of equal length.
   constexpr auto
   operator==(basic_str_inplace const& other) const -> bool {
      for (idx i = 0; i < length; ++i) {
         if (m_data[i] != other[i]) {
            return false;
         }
      }
      return true;
   };

   constexpr auto
   operator==(char_type const other) -> bool
      requires(length == 1u + static_cast<unsigned>(is_null_terminated))
   {
      return m_data[0] == other;
   }

   constexpr auto
   data() [[clang::lifetimebound]] -> char* {
      return m_data;
   }

   [[nodiscard]]
   constexpr auto
   data() const [[clang::lifetimebound]] -> char const* {
      return m_data;
   }

   [[nodiscard]]
   constexpr auto
   size() const -> idx {
      return length;
   }

   // Concatenate constant-evaluated strings.
   template <idx other_length>
   friend constexpr auto
   operator+(
      basic_str_inplace<char_type, length, is_null_terminated> const& self,
      basic_str_inplace<char_type, other_length, is_null_terminated> const&
         other_string)
      -> basic_str_inplace<char_type,
                           length + other_length - is_null_terminated,
                           is_null_terminated> {
      constexpr idx new_length = length + other_length - is_null_terminated;

      basic_str_inplace<char_type, new_length, is_null_terminated> new_string;

      for (idx i = 0u; i < length - is_null_terminated; ++i) {
         new_string[i] = self.m_data[i];
      }

      for (idx i = length - is_null_terminated; i < new_length; ++i) {
         new_string[i] = other_string.data()[i - (length - is_null_terminated)];
      }

      return new_string;
   }

   // Concatenate a string literal to a `basic_str_inplace`.
   template <idx other_length>
   friend constexpr auto
   operator+(
      basic_str_inplace<char_type, length, is_null_terminated> const& self,
      char_type const (&other_string)[other_length]) {
      [[assume(other_string[other_length.raw - 1] == '\0')]];
      return self
             + basic_str_inplace<char_type, other_length - !is_null_terminated,
                                 is_null_terminated>{other_string};
   }

   // Concatenate a `basic_str_inplace` to a string literal.
   template <idx other_length>
   friend constexpr auto
   operator+(
      char_type const (&other_string)[other_length],
      basic_str_inplace<char_type, length, is_null_terminated> const& self) {
      [[assume(other_string[other_length.raw - 1] == '\0')]];
      return basic_str_inplace<char_type, other_length - !is_null_terminated,
                               is_null_terminated>{other_string}
             + self;
   }

 private:
   constexpr void
   copy_string_data(char_type const* p_source) {
      if consteval {
         for (idx i = 0u; i < length; ++i) {
            this->m_data[i] = p_source[i];
         }
      } else {
         copy_memory(p_source, this->data(), length);
      }
   }

   char_type m_data[length];
};

// Deduce the length of string literals without a null-terminator.
template <idx len>
basic_str_inplace(char const (&str)[len])
   -> basic_str_inplace<char, len - 1, false>;

template <idx deduced_length>
using str_inplace = basic_str_inplace<char, deduced_length, false>;

template <idx deduced_length>
using zstr_inplace = basic_str_inplace<char, deduced_length, true>;

// Create a `str_inplace` from a smaller string, and null out the unfilled
// bytes.
template <idx padded_length, idx deduced_length>
   requires((deduced_length - 1) <= padded_length)
consteval auto
make_str_inplace(char const (&string)[deduced_length])
   -> str_inplace<padded_length> {
   [[assume(string[deduced_length.raw - 1] == '\0')]];
   str_inplace<padded_length> new_string;
   // Subtract 1 to skip the string literal's null terminator.
   for (idx i; i < deduced_length - 1; ++i) {
      new_string[i] = string[i.raw];
   }
   // Pad the string out with null bytes.
   for (idx i = deduced_length - 1; i < padded_length; ++i) {
      new_string[i] = '\0';
   }
   return new_string;
}

// TODO: Add a variant that doesn't require `padded_length`.
// Create a `str_inplace` from a smaller string, and null out the unfilled
// bytes.
template <idx padded_length, idx deduced_length>
   requires((deduced_length - 1) <= padded_length)
consteval auto
make_zstr_inplace(char const (&string)[deduced_length])
   -> zstr_inplace<padded_length> {
   [[assume(string[deduced_length.raw - 1] == '\0')]];
   zstr_inplace<padded_length> new_string;
   for (idx i; i < deduced_length; ++i) {
      new_string[i] = string[i.raw];
   }
   // Pad the string out with null bytes.
   for (idx i = deduced_length; i < padded_length; ++i) {
      new_string[i] = '\0';
   }
   return new_string;
}

[[nodiscard, clang::no_builtin]]
constexpr auto
compare_strings_scalar(str_view const string_1, str_view const string_2)
   -> bool {
   if (string_1.size() != string_2.size()) {
      return false;
   }

   for (idx i = 0u; i < string_1.size(); ++i) {
      if (string_1[i] != string_2[i]) {
         return false;
      }
   }

   return true;
}

namespace detail {
[[nodiscard]]
auto
compare_strings_detail(str_view string_1, str_view string_2) -> bool;
}

[[nodiscard]]
constexpr auto
compare_strings(str_view string_1, str_view string_2) -> bool {
   if consteval {
      return compare_strings_scalar(string_1, string_2);
   } else {
      return detail::compare_strings_detail(string_1, string_2);
   }
}

// `idx` is logically 63-bit, so a 64-bit integer is unrepresentable and suits a
// sentinel value well.
using maybe_idx =
   maybe<sentinel<idx, __builtin_bit_cast(idx, limits<uword>::max())>>;

auto
print(str_view string) -> maybe_idx;

auto
println(str_view string) -> maybe_idx;

auto
println() -> maybe_idx;

auto
eprint(str_view string) -> maybe_idx;

auto
eprintln(str_view string) -> maybe_idx;

auto
eprintln() -> maybe_idx;

// TODO: Investigate zero-overhead `println` of literals again.

// TODO: Make a dynamically allocating `println` overload.

// TODO: Make a comparison function for null-terminated string pointers.

}  // namespace cat

// These must be implemented after both `maybe` and `string`:

template <typename T>
[[nodiscard]]
auto
cat::maybe<T>::or_exit(cat::str_view const error_message, iword exit_code) & {
   if (this->has_value()) [[likely]] {
      if constexpr (!is_void<T>) {
         return this->value();
      } else {
         return;
      }
   } else {
      auto _ = eprintln(error_message);
      exit(exit_code);
   }
}

template <typename T>
[[nodiscard]]
auto
cat::maybe<T>::or_exit(cat::str_view const error_message,
                       iword exit_code) const& {
   if (this->has_value()) [[likely]] {
      if constexpr (!is_void<T>) {
         return this->value();
      } else {
         return;
      }
   } else {
      auto _ = eprintln(error_message);
      exit(exit_code);
   }
}

template <typename T>
[[nodiscard]]
auto
cat::maybe<T>::or_exit(cat::str_view const error_message, iword exit_code) && {
   if (this->has_value()) [[likely]] {
      if constexpr (!is_void<T>) {
         return move(this)->value();
      } else {
         return;
      }
   } else {
      auto _ = eprintln(error_message);
      exit(exit_code);
   }
}

template <typename T>
[[nodiscard]]
auto
cat::maybe<T>::or_exit(cat::str_view const error_message,
                       iword exit_code) const&& {
   if (this->has_value()) [[likely]] {
      if constexpr (!is_void<T>) {
         return move(this)->value();
      } else {
         return;
      }
   } else {
      auto _ = eprintln(error_message);
      exit(exit_code);
   }
}

#include "../implementations/string_length.tpp"
