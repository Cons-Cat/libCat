// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/algorithm>
#include <cat/allocator>
#include <cat/array>
#include <cat/collection>
#include <cat/math>
#include <cat/null_allocator>
#include <cat/utility>

namespace cat {

// TODO: Support `__sanitizer_annotate_contiguous_container`.

template <typename T, is_allocator allocator_type>
class [[gsl::Owner]]
vec : public collection_interface<vec<T, allocator_type>, T>,
      public random_access_iterable_interface<T> {
   template <typename U, is_allocator allocator, typename... Us>
      requires(sizeof...(Us) > 0u)
   friend constexpr auto
   make_vec(allocator&, Us&&...) -> maybe<vec<U, allocator>>;

   template <typename U, is_allocator allocator>
   friend constexpr auto
   make_vec(allocator&) -> vec<U, allocator>;

   template <typename U, is_allocator allocator>
   friend constexpr auto
   make_vec_reserved(allocator&, idx) -> maybe<vec<U, allocator>>;

   template <typename U, is_allocator allocator>
   friend constexpr auto
   make_vec_filled(allocator&, idx, U const&) -> maybe<vec<U, allocator>>;

 public:
   constexpr vec() = delete ("`cat::vec` cannot be created without an "
                             "allocator. Call `cat::make_vec()` instead!");

   // Empty a vector upon move.
   constexpr vec(vec&& other)
       : m_p_data(other.m_p_data),
         m_current_size(other.m_current_size),
         m_current_capacity(other.m_current_capacity),
         m_allocator(other.m_allocator) {
      other.m_p_data = nullptr;
      other.m_current_size = 0;
      other.m_current_capacity = 0;
   }

   auto
   operator=(vec const&)
      -> vec& = delete ("Implicit copying of `cat::vec` is forbidden. Call "
                        "`.clone() or move instead!");

   // Empty a vector upon move.
   constexpr auto
   operator=(vec&& other) -> vec& {
      m_p_data = other.m_p_data;
      m_current_size = other.m_current_size;
      m_current_capacity = other.m_current_capacity;
      // TODO: This line doesn't rebind the allocator reference!
      // m_allocator = other.m_allocator;
      other.m_p_data = nullptr;
      other.m_current_size = 0;
      other.m_current_capacity = 0;
      return *this;
   }

   constexpr ~vec() {
      hard_reset();
   }

 protected:
   // Being `protected:` permits derived classes and adaptors to call these.

   constexpr vec(allocator_type& allocator [[clang::lifetimebound]])
       : m_p_data(nullptr),
         m_current_size(0),
         m_current_capacity(0),
         m_allocator(allocator) {
   }

   [[deprecated(
      "Implicit copying of `cat::vec` is forbidden. Call `.clone() or move"
      "instead!")]]
   constexpr vec(vec const& other_vector) = default;

   // Reallocate memory, or make an initial allocation.
   [[clang::optnone]]
   constexpr auto
   internal_allocate(idx minimum_capacity) {
      if (m_p_data == nullptr) {
         return m_allocator.template salloc_multi<T>(minimum_capacity);
      }
      return m_allocator.resalloc_multi(m_p_data, m_current_capacity,
                                        minimum_capacity);
   }

   // Reallocate this vector's memory if it is exceeded, in a non-`constexpr`
   // context.
   constexpr auto
   increase_storage() -> maybe<void> {
      idx const minimum_capacity =
         (m_current_capacity > 0u)
            ? m_current_capacity * 2u
            // If this storage has not been allocated yet,
            // then greedily allocate its capacity as 4.
            : 4u;

      // TODO: I think there is a bug in GCC constexpr memory. This is a
      // workaround.
      if consteval {
         T* p_new = new T[minimum_capacity.raw];
         for (idx i = 0u; i < m_current_size; ++i) {
            new (p_new + i) T(move(m_p_data[i]));
         }
         for (idx i = m_current_size + 1u; i < minimum_capacity; ++i) {
            new (p_new + i) T;
         }
         delete[] m_p_data;
         m_p_data = p_new;
         m_current_capacity = minimum_capacity;
      } else {
         // Make a new allocation with size feedback.
         auto [alloc_span, alloc_bytes] =
            prop(internal_allocate(minimum_capacity));

         m_current_capacity = alloc_bytes / sizeof(T);
         m_p_data = alloc_span.data();
      }

      return monostate;
   }

 public:
   // Get the non-`const` address of this `vec`'s internal array.
   [[nodiscard]]
   constexpr auto
   data() [[clang::lifetimebound]] -> T* {
      return m_p_data;
   }

   // Get the `const` address of this `vec`'s internal array.
   [[nodiscard]]
   constexpr auto
   data() const [[clang::lifetimebound]] -> T const* {
      return m_p_data;
   }

   [[nodiscard]]
   constexpr auto
   size() const -> idx {
      return m_current_size;
   }

   [[nodiscard]]
   constexpr auto
   capacity() const -> idx {
      return m_current_capacity;
   }

   // Destroy, but do not de-allocate, the elements of this `vec`.
   void
   clear() {
      if constexpr (!is_trivially_destructible<T>) {
         for (idx i = 0; i < m_current_size; ++i) {
            m_p_data[i].~T();
         }
      }

      m_current_size = 0;
   }

   // Deallocate this vector.
   constexpr void
   hard_reset() {
      if consteval {
         delete[] m_p_data;
      } else {
         // TODO: This should de-allocate `m_current_capacity`, but because
         // `free_multi` calls their destructors, and `m_p_data` contains
         // potentially un-initialized data, that would be unsafe.
         m_allocator.free_multi(m_p_data, m_current_size);
         poison_memory_region(m_p_data, m_current_capacity);
      }

      m_p_data = nullptr;
      m_current_size = 0;
      m_current_capacity = 0;
   }

   // Try to allocate storage for at least `minimum_capacity` number of `T`s.
   [[nodiscard]]
   constexpr auto
   reserve(idx minimum_capacity) -> maybe<void> {
      if (minimum_capacity > m_current_capacity) {
         // TODO: I think there is a bug in GCC constexpr memory. This is a
         // workaround.
         if consteval {
            delete[] m_p_data;
            m_p_data = new T[minimum_capacity.raw];
            m_current_capacity = minimum_capacity;

            for (idx i = m_current_size + 1u; i < m_current_capacity; ++i) {
               new (m_p_data + i) T();
            }
         } else {
            auto [alloc_span, alloc_bytes] =
               prop(internal_allocate(minimum_capacity));

            m_p_data = alloc_span.data();
            m_current_capacity = idx(alloc_bytes / sizeof(T));
         }
      }

      // If the new capacity is not larger, do nothing.
      return monostate;
   }

   // Try to change the size of this `vec`.
   [[nodiscard]]
   constexpr auto
   resize(idx size) -> maybe<void> {
      if (size > m_current_capacity) {
         // This sets `this->current_capacity` and `this->p_storage`.
         prop(this->reserve(size));
      }

      // TODO: Initialize the values.

      // If the new size is not larger, simply shrink size and maintain
      // capacity.
      m_current_size = size;
      return monostate;
   }

   // Deep-copy the contents of this `vec`.
   template <is_allocator new_allocator_type>
   [[nodiscard]]
   constexpr auto
   clone(new_allocator_type& allocator
         [[clang::lifetimebound]]) const& -> maybe<vec<T, new_allocator_type>> {
      vec<T, new_allocator_type> new_vector =
         prop(make_vec_reserved<T>(allocator, m_current_capacity));
      new_vector.m_current_size = m_current_size;
      relocate(this->begin(), this->end(), new_vector.begin());

      return move(new_vector);
   }

   // TODO: rval-ref overload of `.push_back()`.
   // TODO: `.emplace_back()`.

   template <typename U>
      requires(is_implicitly_convertible<U, T>)
   [[nodiscard]]
   constexpr auto
   push_back(U&& value) -> maybe<void> {
      if (m_current_size + 1 > m_current_capacity) {
         prop(this->increase_storage());
      }

      m_p_data[m_current_size.raw] = static_cast<T>(fwd(value));
      ++(m_current_size);
      return monostate;
   }

 private:
   T* m_p_data;
   idx m_current_size;
   idx m_current_capacity;
   allocator_type& m_allocator;
};

// TODO: Implement this factory function when either GCC gets value pack
// indexing or I implement `std::initializer_list`.
//

// These factory functions require access to the `protected` constructor, which
// is marked `[[deprecated]]`.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace detail {
template <idx i>
void
initialize_vec(auto& vec, auto&& current, auto&&... next) {
   vec[i] = fwd(current);
   if constexpr (sizeof...(next) > 0u) {
      initialize_vec<i + 1u>(vec, fwd(next)...);
   }
}
}

template <typename T, is_allocator allocator_type, typename... Us>
   requires(sizeof...(Us) > 0u)
[[nodiscard]]
constexpr auto
make_vec(allocator_type& allocator [[clang::lifetimebound]], Us&&... values)
   -> maybe<vec<T, allocator_type>> {
   vec<T, allocator_type> new_vector(allocator);
   prop(new_vector.reserve(sizeof...(Us)));
   new_vector.m_current_size = sizeof...(Us);
   detail::initialize_vec<0u>(new_vector, fwd(values)...);
   return new_vector;
}

template <typename T, is_allocator allocator_type>
[[nodiscard]]
constexpr auto
make_vec(allocator_type& allocator [[clang::lifetimebound]])
   -> vec<T, allocator_type> {
   return vec<T, allocator_type>(allocator);
}

template <typename T, is_allocator allocator_type>
[[nodiscard]]
constexpr auto
make_vec_reserved(allocator_type& allocator [[clang::lifetimebound]],
                  idx capacity) -> maybe<vec<T, allocator_type>> {
   vec<T, allocator_type> new_vector(allocator);
   prop(new_vector.reserve(capacity));
   return new_vector;
}

template <typename T, is_allocator allocator_type>
[[nodiscard]]
constexpr auto
make_vec_filled(allocator_type& allocator [[clang::lifetimebound]], idx count,
                T const& value) -> maybe<vec<T, allocator_type>> {
   vec<T, allocator_type> new_vector(allocator);
   prop(new_vector.reserve(count));
   new_vector.m_current_size = count;
   // TODO: Call a vectorized fill memory function.
   // TODO: Forward from the last `value`.
   for (T& element : new_vector) {
      element = value;
   }
   return new_vector;
}

#pragma GCC diagnostic pop

}  // namespace cat
