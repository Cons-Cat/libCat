// -*- mode: c++ -*-
// vim: set ft=cpp:
#pragma once

#include <cat/collection>
#include <cat/initializer_list>
#include <cat/memory>
#include <cat/meta>

// TODO: Add tests.

namespace cat {

// A `span` is represents an array of `T` with runtime-known length. It stores
// an address and a length. It is random-access iterable.
template <typename T>
class [[clang::trivial_abi, gsl::Pointer(T)]] span
    : public collection_interface<span<T>, T>,
      public random_access_iterable_interface<T> {
 public:
   constexpr span() = default;
   constexpr span(span<T> const&) = default;
   constexpr span(span<T>&&) = default;

   // Construct a `span` as `{address, length}`.
   constexpr span(T* p_in_data [[clang::lifetimebound]], idx in_length)
       : m_p_data(p_in_data), m_size(in_length) {
   }

   // Construct an empty `span` with `nullptr`.
   constexpr span(decltype(nullptr)) : m_p_data(nullptr), m_size(0) {
   }

   // Construct a span from a static `initializer_list`.
   constexpr span(initializer_list<T> initializers)
      requires(is_const<T>)
       : m_p_data(initializers.begin()), m_size(initializers.size()) {
   }

   // Implicitly convert a contiguous container into a span. Const-correctness
   // is managed by the deduction guides below.
   template <is_random_access U>
   constexpr span(U& collection [[clang::lifetimebound]]
                  )
       : m_p_data(collection.data()), m_size(collection.size()) {
   }

   template <typename U>
   constexpr span(U&& collection) =
      delete("A `cat::span` cannot alias a temporary, because the span would"
             "immediately dangle.");

   constexpr auto
   operator=(span<T> const&) -> span<T>& = default;
   constexpr auto
   operator=(span<T>&&) -> span<T>& = default;

   // Construct a span from a static `initializer_list`.
   constexpr auto
   operator=(initializer_list<T> initializers) -> span&
      requires(is_const<T>)
   {
      m_p_data = initializers.begin();
      m_size = initializers.size();
      return *this;
   }

   // Implicitly convert a contiguous container into a span. Const-correctness
   // is managed by the deduction guides below.
   template <is_random_access U>
   auto
   operator=(U& collection [[clang::lifetimebound]]) -> span& {
      m_p_data = collection.data();
      m_size = collection.size();
      return *this;
   }

   template <typename U>
   auto
   operator=(U&& collection) =
      delete("A `cat::span` cannot alias a temporary, because the span would"
             "immediately dangle.");

   // Get the non-`const` address that this `span` starts at.
   [[nodiscard]]
   constexpr auto
   data() [[clang::lifetimebound]] -> T* {
      return m_p_data;
   }

   // Get the `const` address that this `span` starts at.
   [[nodiscard]]
   constexpr auto
   data() const -> T const* {
      return m_p_data;
   }

   // Get the number of elements owned by this `span`.
   [[nodiscard]]
   constexpr auto
   size() const -> idx {
      return m_size;
   }

   // These data members should be `public` so that this is a structural type.

   // This is arranged as pointer, then size, to follow the ABI of Linux
   // standard `iovec`s. Unfortunately, that is opposite of Windws' standard
   // `WSABUF`.
   T* m_p_data;
   idx m_size;
};

template <typename T>
span(initializer_list<T>) -> span<T const>;

// Deduce the `value_type` of containers.
template <typename T>
span(T&) -> span<typename T::value_type>;

// Deduce the `value_type` of containers.
template <typename T>
span(T const&) -> span<typename T::value_type const>;

// Create a span between two addresses.
template <typename T>
constexpr auto
make_span_between(T* p_start, T* p_end) {
   return span(p_start, p_end - p_start);
}

template <typename T>
using view = span<T const> const;

// Simplify non-negative signed integers.
template <typename T>
using maybe_span = maybe<compact<span<T>,
                                 [](span<T> value) -> bool {
                                    // This span is `nullopt` if its
                                    // `.p_storage` is null.
                                    return value.m_p_data;
                                 },
                                 // Default to a null span.
                                 span<T>(nullptr)>>;

}  // namespace cat
